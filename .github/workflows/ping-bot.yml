name: Check Telegram getMe & publish status

on:
  schedule:
    - cron: '*/1 * * * *'    # every 5 minutes
  workflow_dispatch:         # allow manual runs

jobs:
  check-getme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0          # fetch all history so push/pull can work
          persist-credentials: true

      - name: Sync with remote main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull origin main --rebase || true

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Ensure docs directory exists
        run: mkdir -p docs

      - name: Show secret existence (masked)
        run: |
          if [ -z "${{ secrets.TELEGRAM_TOKEN }}" ]; then
            echo "TELEGRAM_TOKEN secret is NOT set"
          else
            echo "TELEGRAM_TOKEN secret exists (value masked)"
          fi

      - name: Call Telegram getMe (with debug output)
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        run: |
          set -uo pipefail
          now=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Checking Telegram getMe at $now"

          if [ -z "$TELEGRAM_TOKEN" ]; then
            echo "No TELEGRAM_TOKEN provided (empty). Writing failure JSONs."
            jq -n --arg t "$now" '{ok:false, checked_at:$t, note:"TELEGRAM_TOKEN missing"}' > docs/bot_info.json
            jq -n --arg t "$now" '[{measure:"e2dashboard_status", data:[[($t),"down",($t),0]], categories: {up:{class:"rect_has_data", tooltip_html:"<b>UP</b>"}, degraded:{class:"rect_partial", tooltip_html:"<b>DEGRADED</b>"}, down:{class:"rect_has_no_data", tooltip_html:"<b>DOWN</b>"}, no_data:{class:"rect_no_data", tooltip_html:"<b>NO DATA</b>"}}}]' > docs/status.json
            ls -l docs || true
            echo "Wrote fallback files because token missing"
            exit 0
          fi

          # call getMe
          curl_status=0
          curl -sS --max-time 10 "https://api.telegram.org/bot${TELEGRAM_TOKEN}/getMe" -o /tmp/tg.json || curl_status=$?
          echo "curl exit code: $curl_status"
          if [ -f /tmp/tg.json ]; then
            echo "--- /tmp/tg.json (first 10 lines or full) ---"
            head -n 50 /tmp/tg.json || true
            echo "-------------------------------------------"
          else
            echo "/tmp/tg.json not created"
          fi

          if [ "$curl_status" -eq 0 ] && jq -e . /tmp/tg.json >/dev/null 2>&1; then
            echo "Telegram responded with JSON; augmenting with checked_at and writing docs/bot_info.json"
            jq --arg t "$now" '. + {checked_at: $t}' /tmp/tg.json > docs/bot_info.json
            ok=$(jq -r '.ok // "false"' docs/bot_info.json)
            echo "telegram ok value: $ok"
            if [ "$ok" = "true" ]; then
              jq -n --arg t "$now" '[{measure:"e2dashboard_status", data:[[($t),"up",($t),99.99]], categories: {up:{class:"rect_has_data", tooltip_html:"<b>UP</b>"}, degraded:{class:"rect_partial", tooltip_html:"<b>DEGRADED</b>"}, down:{class:"rect_has_no_data", tooltip_html:"<b>DOWN</b>"}, no_data:{class:"rect_no_data", tooltip_html:"<b>NO DATA</b>"}}}]' > docs/status.json
            else
              jq -n --arg t "$now" '[{measure:"e2dashboard_status", data:[[($t),"down",($t),0]], categories: {up:{class:"rect_has_data", tooltip_html:"<b>UP</b>"}, degraded:{class:"rect_partial", tooltip_html:"<b>DEGRADED</b>"}, down:{class:"rect_has_no_data", tooltip_html:"<b>DOWN</b>"}, no_data:{class:"rect_no_data", tooltip_html:"<b>NO DATA</b>"}}}]' > docs/status.json
            fi
          else
            echo "curl failed or returned invalid JSON; writing failure JSONs"
            jq -n --arg t "$now" '{ok:false, checked_at:$t, note:"curl failed or invalid JSON", curl_exit_code: '"${curl_status}"'}' > docs/bot_info.json
            jq -n --arg t "$now" '[{measure:"e2dashboard_status", data:[[($t),"down",($t),0]], categories: {up:{class:"rect_has_data", tooltip_html:"<b>UP</b>"}, degraded:{class:"rect_partial", tooltip_html:"<b>DEGRADED</b>"}, down:{class:"rect_has_no_data", tooltip_html:"<b>DOWN</b>"}, no_data:{class:"rect_no_data", tooltip_html:"<b>NO DATA</b>"}}}]' > docs/status.json
          fi

          echo "Files written; listing docs:"
          ls -l docs || true
          echo "---- docs/bot_info.json ----"
          sed -n '1,200p' docs/bot_info.json || true
          echo "---- docs/status.json ----"
          sed -n '1,200p' docs/status.json || true

      

      - name: Commit updated docs JSON files
        uses: EndBug/add-and-commit@v9
        with:
          author_name: github-actions[bot]
          author_email: 41898282+github-actions[bot]@users.noreply.github.com
          message: "chore(actions): update bot_info and status from getMe"
          add: "docs/bot_info.json docs/status.json"
          github_token: ${{ secrets.GITHUB_TOKEN }}
