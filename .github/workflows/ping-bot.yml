name: Check Telegram getMe & publish status

on:
  schedule:
    - cron: '*/5 * * * *'    # every 5 minutes
  workflow_dispatch:         # allow manual runs

jobs:
  check-getme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Ensure docs directory exists
        run: mkdir -p docs

      - name: Call Telegram getMe
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        run: |
          now=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Checking Telegram getMe at $now"

          if [ -z "$TELEGRAM_TOKEN" ]; then
            echo "No TELEGRAM_TOKEN provided"
            jq -n --arg t "$now" '{ok:false, checked_at:$t, note:"TELEGRAM_TOKEN missing"}' > docs/bot_info.json
            jq -n --arg t "$now" '[{measure:"e2dashboard_status", data:[[($t),"down",($t),0]], categories: {up:{class:"rect_has_data", tooltip_html:"<b>UP</b>"}, degraded:{class:"rect_partial", tooltip_html:"<b>DEGRADED</b>"}, down:{class:"rect_has_no_data", tooltip_html:"<b>DOWN</b>"}, no_data:{class:"rect_no_data", tooltip_html:"<b>NO DATA</b>"}}}]' > docs/status.json
            exit 0
          fi

          # call getMe
          if curl -sS --max-time 10 "https://api.telegram.org/bot${TELEGRAM_TOKEN}/getMe" -o /tmp/tg.json; then
            if jq -e . /tmp/tg.json >/dev/null 2>&1; then
              jq --arg t "$now" '. + {checked_at: $t}' /tmp/tg.json > docs/bot_info.json
              ok=$(jq -r '.ok' docs/bot_info.json)
              if [ "$ok" = "true" ]; then
                jq -n --arg t "$now" '[{measure:"e2dashboard_status", data:[[($t),"up",($t),99.99]], categories: {up:{class:"rect_has_data", tooltip_html:"<b>UP</b>"}, degraded:{class:"rect_partial", tooltip_html:"<b>DEGRADED</b>"}, down:{class:"rect_has_no_data", tooltip_html:"<b>DOWN</b>"}, no_data:{class:"rect_no_data", tooltip_html:"<b>NO DATA</b>"}}}]' > docs/status.json
              else
                jq -n --arg t "$now" '[{measure:"e2dashboard_status", data:[[($t),"down",($t),0]], categories: {up:{class:"rect_has_data", tooltip_html:"<b>UP</b>"}, degraded:{class:"rect_partial", tooltip_html:"<b>DEGRADED</b>"}, down:{class:"rect_has_no_data", tooltip_html:"<b>DOWN</b>"}, no_data:{class:"rect_no_data", tooltip_html:"<b>NO DATA</b>"}}}]' > docs/status.json
              fi
            else
              jq -n --arg t "$now" '{ok:false, checked_at:$t, note:"invalid json from getMe"}' > docs/bot_info.json
              jq -n --arg t "$now" '[{measure:"e2dashboard_status", data:[[($t),"down",($t),0]], categories: {up:{class:"rect_has_data", tooltip_html:"<b>UP</b>"}, degraded:{class:"rect_partial", tooltip_html:"<b>DEGRADED</b>"}, down:{class:"rect_has_no_data", tooltip_html:"<b>DOWN</b>"}, no_data:{class:"rect_no_data", tooltip_html:"<b>NO DATA</b>"}}}]' > docs/status.json
            fi
          else
            jq -n --arg t "$now" '{ok:false, checked_at:$t, note:"curl failed or timeout"}' > docs/bot_info.json
            jq -n --arg t "$now" '[{measure:"e2dashboard_status", data:[[($t),"down",($t),0]], categories: {up:{class:"rect_has_data", tooltip_html:"<b>UP</b>"}, degraded:{class:"rect_partial", tooltip_html:"<b>DEGRADED</b>"}, down:{class:"rect_has_no_data", tooltip_html:"<b>DOWN</b>"}, no_data:{class:"rect_no_data", tooltip_html:"<b>NO DATA</b>"}}}]' > docs/status.json
          fi

      - name: Commit updated docs JSON files
        uses: EndBug/add-and-commit@v9
        with:
          author_name: 'github-actions[bot]'
          author_email: '41898282+github-actions[bot]@users.noreply.github.com'
          message: 'chore(actions): update bot_info and status from getMe'
          add: 'docs/bot_info.json docs/status.json'
          github_token: ${{ secrets.GITHUB_TOKEN }}
